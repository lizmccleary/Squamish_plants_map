<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Squamish Plants</title>

 
<script src='https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.js'></script>
<link href='https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.css' rel='stylesheet' />
    <!-- Turf and jQuery code. -->
    <script src="https://npmcdn.com/@turf/turf/turf.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.js"></script> 


    <style>
        body {
            margin: 0;
            padding: 0;
        }


        #map {
            position: absolute;
            width: 100%;
            height: 100%;
        }

        .boxdraw {
            background: rgba(56, 135, 190, 0.1);
            border: 2px solid #3887be;
            position: absolute;
            top: 0;
            left: 0;
            width: 0;
            height: 0;
        }

        .popup_title {
            position: absolute;
            top: 40%;
            bottom: 60%;
            left: 50%;
            width: 70%;
            /* 1/3 of the viewport width */
            height: 70%;
            /* 1/3 of the viewport height */
            transform: translate(-50%, -50%);
            padding: 20px;
            z-index: 1000;
        }

        .popup_title img {
            width: 100%;
            /* Ensure image fills the container width */
            height: auto;
            /* Maintain aspect ratio */
            display: block;
            /* Prevents extra space below image */
        }

        .popup_title .close {
            position: absolute;
            top: 5px;
            right: 10px;
            font-size: 20px;
            cursor: pointer;
        }

        .mapboxgl-popup {
            max-width: 400px;
            font:
                12px/20px 'Helvetica Neue',
                Arial,
                Helvetica,
                sans-serif;
        }

        .map-overlay {
            font:
                12px/20px 'Helvetica Neue',
                Arial,
                Helvetica,
                sans-serif;
            background-color: #fff;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            border-radius: 3px;
            position: absolute;
            width: 25%;
            top: 10px;
            left: 80%;
            padding: 10px;
            display: none;
        }
    </style>

</head>
  
  
<body>
  
  
     <style>
       #menu {
        background: #fff;
        position: absolute;
        z-index: 1;
        top: 10px;
        left: 10px;
        border-radius: 3px;
        width: 120px;
        border: 1px solid rgba(0, 0, 0, 0.4);
        font-family: 'Helvetica Heue', Helvetica/ sans-serif;
    }

    #menu a {
        font-size: 13px;
        color: #404040;
        display: block;
        margin: 0;
        padding: 0;
        padding: 10px;
        text-decoration: none;
        border-bottom: 1px solid rgba(0, 0, 0, 0.25);
        text-align: center;
    }

    #menu a:last-child {
        border: none;
    }

    #menu a:hover {
        background-color: #f8f8f8;
        color: #404040;
    }

    #menu a.active {
        background-color: #3887be;
        color: #ffffff;
    }

    #menu a.active:hover {
        background: #3074a4;
    }
  </style> 
  
    <nav id="menu"></nav>
    <div id="map"></div>
  
    <div id="popup_title" class="popup_title">
        <span class="close" onclick="togglePopup()">&times;</span>
        <img id="popup_titleImg" src="webmap-accessintro.png" alt='Intro Slide'> 
    </div>

    <div id="map-overlay" class="map-overlay"></div>

    <script>

        // Function to toggle the visibility of the popup (intro slide)
        function togglePopup() {
            var popup_title = document.getElementById('popup_title');
            if (popup_title.style.display === 'none' || popup_title.style.display === '') {
                popup_title.style.display = 'block';
            } else {
                popup_title.style.display = 'none';
            }
        }



        ////// map /////////////////////////////////////////////////////////////
       	mapboxgl.accessToken = 'pk.eyJ1IjoibGl6bWNjbGVhcnkiLCJhIjoiY2x3amt0dHVkMG4wZzJrbDh6bTF5djV2cyJ9.TeDF2xIPvCR4wmiTdEju8w';
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/lizmccleary/clwqx2xyq015f01qea456a8ck',
        zoom: 9,
        pitch: 60,
        bearing: 30,
        center: [-123.16761577284362, 49.68914344599266]
    });
          
        // add Find My Location to map 
        map.addControl(new mapboxgl.NavigationControl());

        // Add a scale control to the map
        map.addControl(new mapboxgl.ScaleControl());

        // adding 3d terrain
        map.on('style.load', () => {
            map.addSource('mapbox-dem', {
                'type': 'raster-dem',
                'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',
                'tileSize': 512,
                'maxzoom': 14
            });
            // add the DEM source as a terrain layer with exaggerated height
            map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1.5 });
        });
      
     ////// Bounding Box Query /////////////
     map.boxZoom.disable(); 
      
     ///// start to add layers to build pop-ups and functions off of /////////

    // Wait until the map has finished loading.
    map.on('load', () => {
      
  const canvas = map.getCanvasContainer();

            let start;
            let current;
            let box;

            map.addSource('plants_data', {
                type: 'geojson',
                data: 'https://raw.githubusercontent.com/lizmccleary/Squamish_Access_liz/main/updated_plants.geojson' // Replace with the URL of your GeoJSON data
            });

            map.addLayer({
                id: 'highlighted-plants',
                type: 'circle',
                source: 'plants_data',
                paint: {
                    'circle-color': '#AFFF00',
                    'circle-radius': 5,
                    'circle-stroke-width': .3,
                    'circle-stroke-color': '#fff',
                    'circle-opacity': 1
                },
                 'filter': ['in', 'feature_collection_name', '']
            });
      //// this is a layer to use later in "Total plants" pop-up 
      
      
              map.addLayer({
                id: 'squam-plants',
                type: 'circle',
                source: 'plants_data',
                layout: {
                  'visibility': 'visible'
                }, 
                paint: {
                    'circle-color': '#11b4da',
                    'circle-radius': 6,
                    'circle-opacity':1
                }
            },
            );
            /// this layer is involved in queerying data 
      
      
            
            map.addSource('squamish_boundary', {
                type: 'geojson',
                data: 'https://raw.githubusercontent.com/lizmccleary/Squamish_Access_liz/main/squamish_boundary.geojson' // Replace with the URL of your GeoJSON data
            });

            map.addLayer({
                id: 'squam-boundary',
                type: 'fill',
                source: 'squamish_boundary',
                layout: {
                    'visibility': 'visible'
                },
                paint: {
                    'fill-color': '#FFB6C1',
                    'fill-outline-color': '#FFB6C1',
                    'fill-opacity': 0.60
                }
            },
            );
            /// this is the squamish territory layer 
          
      
            map.addSource('parks_boundary', {
                type: 'geojson',
                data: 'https://raw.githubusercontent.com/lizmccleary/Squamish_Access_liz/main/parks_boundary.geojson' // Replace with the URL of your GeoJSON data
            });

            map.addLayer({
                id: 'park-boundary',
                type: 'fill',
                source: 'parks_boundary',
                layout: {
                    'visibility': 'visible'
                },
                paint: {
                    'fill-color': '#90EE90',
                    'fill-outline-color': '#90EE90',
                    'fill-opacity': 0.75
                }
            },
            );
            /// this is the BC Parks boundary layer 
    });

      
// After the last frame rendered before the map enters an "idle" state.
    map.on('idle', () => {
        // If these three layers were not added to the map, abort
        if (!map.getLayer('squam-plants') || !map.getLayer('squam-boundary') || !map.getLayer('park-boundary')) {
            return;
        }

        // Enumerate ids of the layers.
        const toggleableLayerIds = ['squam-plants', 'squam-boundary', 'park-boundary'];

        // Set up the corresponding toggle button for each layer.
        for (const id of toggleableLayerIds) {
            // Skip layers that already have a button set up.
            if (document.getElementById(id)) {
                continue;
            }

            // Create a link.
            const link = document.createElement('a');
            link.id = id;
            link.href = '#';
            link.textContent = id;
            link.className = 'active';

            // Show or hide layer when the toggle is clicked.
            link.onclick = function (e) {
                const clickedLayer = this.textContent;
                e.preventDefault();
                e.stopPropagation();

                const visibility = map.getLayoutProperty(
                    clickedLayer,
                    'visibility'
                );

                // Toggle layer visibility by changing the layout object's visibility property.
                if (visibility === 'visible') {
                    map.setLayoutProperty(clickedLayer, 'visibility', 'none');
                    this.className = '';
                } else {
                    this.className = 'active';
                    map.setLayoutProperty(
                        clickedLayer,
                        'visibility',
                        'visible'
                    );
                }
            };

            const layers = document.getElementById('menu');
            layers.appendChild(link);
        }
    });

///////////////////// Create a bounding box ////////////////////////
            canvas.addEventListener('mousedown', mouseDown, true);

            // Return the xy coordinates of the mouse position
            function mousePos(e) {
                const rect = canvas.getBoundingClientRect();
                return new mapboxgl.Point(
                    e.clientX - rect.left - canvas.clientLeft,
                    e.clientY - rect.top - canvas.clientTop
                );
            }

            function mouseDown(e) {
                // Continue the rest of the function if the shiftkey is pressed.
                if (!(e.shiftKey && e.button === 0)) return;

                // Disable default drag zooming when the shift key is held down.
                map.dragPan.disable();

                // Call functions for the following events
                document.addEventListener('mousemove', onMouseMove);
                document.addEventListener('mouseup', onMouseUp);
                document.addEventListener('keydown', onKeyDown);

                // Capture the first xy coordinates
                start = mousePos(e);
            }

            function onMouseMove(e) {
                // Capture the ongoing xy coordinates
                current = mousePos(e);

                // Append the box element if it doesnt exist
                if (!box) {
                    box = document.createElement('div');
                    box.classList.add('boxdraw');
                    canvas.appendChild(box);
                }

                const minX = Math.min(start.x, current.x),
                    maxX = Math.max(start.x, current.x),
                    minY = Math.min(start.y, current.y),
                    maxY = Math.max(start.y, current.y);

                // Adjust width and xy position of the box element ongoing
                const pos = `translate(${minX}px, ${minY}px)`;
                box.style.transform = pos;
                box.style.width = maxX - minX + 'px';
                box.style.height = maxY - minY + 'px';
            }

            function onMouseUp(e) {
                // Capture xy coordinates
                finish([start, mousePos(e)]);
            }

            function onKeyDown(e) {
                // If the ESC key is pressed
                if (e.keyCode === 27) finish();
            }

            function finish(bbox) {
                // Remove these events now that finish has been called.
                document.removeEventListener('mousemove', onMouseMove);
                document.removeEventListener('keydown', onKeyDown);
                document.removeEventListener('mouseup', onMouseUp);

                if (box) {
                    box.parentNode.removeChild(box);
                    box = null;
                }

                if (bbox) {
                    const features = map.queryRenderedFeatures(bbox, {
                        layers: ['squam-plants']
                    });

                    if (features.length >= 10000) {
                        return window.alert('Select a smaller number of features');
                    }

                    // set filter for highlighted plants layer, uses ID property to ensure no duplicates
                    const coords = features.map((feature) => feature.properties.ID);
                    map.setFilter('highlighted-plants', ['in', 'ID', ...coords]);
                }

                map.dragPan.enable();
            }

            //changes mouse to pointer
            map.on('mousemove', (e) => {
                const features = map.queryRenderedFeatures(e.point, {
                    layers: ['highlighted-plants']
                });

            });

            //popup ... might delete or change info to a picture of the plants from iNaturalist later
            map.on('click', 'squam-plants', (e) => {
                const coordinates = e.features[0].geometry.coordinates.slice();
                const description = e.features[0].properties.feature_collection_name;

                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                }

                new mapboxgl.Popup()
                    .setLngLat(coordinates)
                    .setText(description)
                    .addTo(map);
            });


        ////////////////search similar features through mouse-over/////////////////////////////////////////////////////////////////////////

        map.on('load', () => {
            const overlay = document.getElementById('map-overlay');

            // Create a popup, but don't add it to the map yet.
            const popup3 = new mapboxgl.Popup({
                closeButton: false
            });

            // function makes sure feature is not a duplicate caused by loading multiple map tiles at once
            function getUniqueFeatures(features, comparatorProperty) {
                const uniqueIds = new Set();
                const uniqueFeatures = [];
                for (const feature of features) {
                    const id = feature.properties[comparatorProperty];
                    if (!uniqueIds.has(id)) {
                        uniqueIds.add(id);
                        uniqueFeatures.push(feature);
                    }
                }
                return uniqueFeatures;

            }

            map.on('mousemove', 'squam-plants', (e) => {

                // feature = plant that mouse is hovering over
                const feature = e.features[0];

                const current_species = feature.properties.feature_collection_name

                const relatedplants = map.querySourceFeatures('highlighted-plants', {  //'squam-plants'
                    sourceLayer: 'original',
                    filter: ['in', 'feature_collection_name', current_species]
                });

                const uniqueplants = getUniqueFeatures(relatedplants, 'ID');

                const title = document.createElement('strong');
                title.textContent =    
                  feature.properties.feature_collection_name  
  

                const ID = document.createElement('div');
                ID.textContent =
                    'Total plants:' + " " +
                    feature.properties.species_count

                overlay.innerHTML = '';
                overlay.style.display = 'block';

                overlay.appendChild(title);
                overlay.appendChild(ID);


                map.setFilter('highlighted-plants', [
                    'in',
                    'feature_collection_name',
               feature.properties.feature_collection_name
                ]);

            });

            map.on('mouseleave', 'squam-plants', () => {
                map.getCanvas().style.cursor = '';
                popup3.remove();
                map.setFilter('highlighted-plants', ['in', 'feature_collection_name']);
                overlay.style.display = 'none';
            });
        });


    </script>
        
</body>

</html>
